[{"/home/baby/Desktop/project/movies/frontend/src/index.js":"1","/home/baby/Desktop/project/movies/frontend/src/reportWebVitals.js":"2","/home/baby/Desktop/project/movies/frontend/src/App.js":"3","/home/baby/Desktop/project/movies/frontend/src/routes/login.js":"4","/home/baby/Desktop/project/movies/frontend/src/routes/signup.js":"5","/home/baby/Desktop/project/movies/frontend/src/routes/emailconfirm.js":"6","/home/baby/Desktop/project/movies/frontend/src/adminroutes/alltask.js":"7","/home/baby/Desktop/project/movies/frontend/src/components/slidebar.js":"8","/home/baby/Desktop/project/movies/frontend/src/routes/usertask.js":"9","/home/baby/Desktop/project/movies/frontend/src/components/tableuser.js":"10","/home/baby/Desktop/project/movies/frontend/src/routes/unauth.js":"11","/home/baby/Desktop/project/movies/frontend/src/components/tableuseradmin.js":"12","/home/baby/Desktop/project/movies/frontend/src/components/slidebarsmall.js":"13","/home/baby/Desktop/project/movies/frontend/src/adminroutes/createtask.js":"14","/home/baby/Desktop/project/movies/frontend/src/routes/404.js":"15"},{"size":500,"mtime":1639907836691,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1639907836691,"results":"18","hashOfConfig":"17"},{"size":1455,"mtime":1640458184076,"results":"19","hashOfConfig":"17"},{"size":4492,"mtime":1640438807679,"results":"20","hashOfConfig":"17"},{"size":3929,"mtime":1640418710169,"results":"21","hashOfConfig":"17"},{"size":3648,"mtime":1640419202746,"results":"22","hashOfConfig":"17"},{"size":9669,"mtime":1640439517976,"results":"23","hashOfConfig":"17"},{"size":1705,"mtime":1640438399439,"results":"24","hashOfConfig":"17"},{"size":4873,"mtime":1640439456923,"results":"25","hashOfConfig":"17"},{"size":1175,"mtime":1640413808192,"results":"26","hashOfConfig":"17"},{"size":2368,"mtime":1640439350313,"results":"27","hashOfConfig":"17"},{"size":1190,"mtime":1640422313862,"results":"28","hashOfConfig":"17"},{"size":1418,"mtime":1640454206890,"results":"29","hashOfConfig":"17"},{"size":4288,"mtime":1640434962803,"results":"30","hashOfConfig":"17"},{"size":2309,"mtime":1640440387129,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1773h7u",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/baby/Desktop/project/movies/frontend/src/index.js",[],["69","70"],"/home/baby/Desktop/project/movies/frontend/src/reportWebVitals.js",[],"/home/baby/Desktop/project/movies/frontend/src/App.js",["71","72"],"/home/baby/Desktop/project/movies/frontend/src/routes/login.js",[],"/home/baby/Desktop/project/movies/frontend/src/routes/signup.js",[],"/home/baby/Desktop/project/movies/frontend/src/routes/emailconfirm.js",["73"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport './login.css'\nimport axios from \"axios\"\nimport * as qs from 'query-string';\n\n\nclass EmailConfirm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            stat : \"\",\n            text : \"\",\n            padd: \"\"\n        }\n\n\n    }\n\n    resolution = () => {\n        console.log(window.screen.width)\n\n        if (window.screen.width < 400) {\n            this.setState(\n                {\n                    padd: \"3%\"\n                }\n            )\n        }\n        else if (window.screen.width > 400 && window.screen.width < 800) {\n            this.setState(\n                {\n                    padd: \"15%\"\n                }\n            )\n        }\n        else if (window.screen.width > 800) {\n            this.setState(\n                {\n                    padd: \"33%\"\n                }\n            )\n        }\n    }\n\n    SendData = () => {\n        const parsed = qs.parse(window.location.search);\n\n        axios.get(`${this.props.ip}/confirmation/${parsed.uuid}&&${parsed.hash}`).then((res)=>\n        {\n            console.log(res.data)\n            if(res.data.success)\n            {\n                this.setState(\n                    {\n                        stat : res.data.success,\n                        text : \"Hi user, your email has been successfully verified. Please login to your account.\"\n                    }\n                )\n            }\n            else if(res.data.error == \"Already the email verified\")\n            {\n                this.setState(\n                    {\n                        stat : res.data.error,\n                        text : \"Hi user, the email was already verified. Please login to your account.\"\n                    }\n                )\n            }\n            else\n            {\n                this.setState(\n                    {\n                        stat : res.data.error,\n                        text : \"Hi user, the email is not verified. Please try again.\"\n                    }\n                )\n            }\n        })\n    }\n    componentDidMount() {\n        this.SendData()\n        this.resolution()\n    }\n\n\n    render() {\n        \n        return (\n            <div >\n\n                <div className=\"fst_half container-fluid\"\n                    style={{\n                        background: \"#FF9900\"\n                    }}\n                >\n                    {/* Navbar */}\n                    <nav className=\"navbar container\" style={{ display: \"flex\", justifyContent: \"space-around\", padding: \"3% 0\" }}>\n                        <div>\n                            <h2 className=\"navbar-brand bb\"><strong>Kavin</strong>Groups </h2>\n                        </div>\n\n\n                        <div >\n                            <div>\n                                <Link to=\"/login\" className=\"btn ll1\" id='idll1'  >Login</Link>\n                                <Link to=\"/signup\" className=\"btn ll1\" id='idll2' >Signup </Link>\n                            </div>\n                        </div>\n                    </nav>\n                </div>\n\n                <div className=\"logg\" style={{ margin: `7% ${this.state.padd}` }}>\n                    <h4 className=\"text-center\"> {this.state.stat} </h4><br></br>\n                    <p style={{ padding: \"0 10px\" }}>\n                        {this.state.text}\n                    </p>\n\n                    <Link to=\"/login\" className=\"form-control btn\" style={{ background: \"#FF9900\" }} >Login</Link><br></br><br></br>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default EmailConfirm","/home/baby/Desktop/project/movies/frontend/src/adminroutes/alltask.js",["74","75","76","77"],"\nimport SlideBar from \"../components/slidebar\";\nimport { Component } from \"react\";\nimport axios from \"axios\"\nimport TableUser from \"../components/tableuser\";\nimport Cookies from 'universal-cookie';\nimport { Link } from \"react-router-dom\";\nimport { ToastsContainer, ToastsStore } from 'react-toasts';\nimport jwt_decode from \"jwt-decode\";\nimport TableUserAdmin from \"../components/tableuseradmin\";\nimport { Button, Modal } from 'react-bootstrap';\nimport \"./alltask.css\"\nimport SlideBarsmall from \"../components/slidebarsmall\";\n\nclass Alltask extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            resp: [],\n            errormsg: \"\",\n            toggle: false,\n            toggleslide: true,\n            copyresp_taskName : \"\",\n            copyresp_ID : \"\",\n            copyresp_fromdate : \"\",\n            copyresp_todate : \"\",\n            copyresp_email : \"\",\n            copyresp_completed : \"\",\n        }\n    }\n\n\n    userCheck = () => {\n        let token = localStorage.getItem(\"token\")\n        if (token == null) {\n            window.location = \"/unauth\"\n\n        }\n        else {\n            let dec = jwt_decode(token)\n            const cookies = new Cookies()\n            if (dec.role === \"80d78da6b546a45049777384315b3a6d\" && cookies.get('role') === \"80d78da6b546a45049777384315b3a6d\"&& cookies.get('isadmin') === \"100\") {\n                ToastsStore.success(\"Loggedin !!\")\n            }\n            else if(dec.role === \"b7c8ff00ca7181a4d7ab986510bcc9db\")\n            {\n                window.location =\"/unauth\"\n            }\n            else {\n                ToastsStore.error(\"unauthorized access !!\")\n                window.location = \"/unauth\"\n            }\n\n        }\n    }\n\n    GetAlldata = () => {\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.get(`${this.props.ip}/admin/alltask`, config).then((res) => {\n            this.setState({ resp: res.data })\n\n            console.log(res.data)\n            if (res.data.error) {\n                this.setState({\n                    errormsg: res.data.error,\n                })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.userCheck()\n        this.GetAlldata()\n    }\n\n    sendUpdateyes = (index) => {\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n\n        this.setState({ toggle: !this.state.toggle })\n        var copyvals = this.state.resp\n        var click = copyvals[index]\n        this.setState({\n            copyresp_taskName : click.taskname,\n            copyresp_ID : click._id,\n            copyresp_fromdate : click.fromTask,\n            copyresp_todate : click.toTask,\n            copyresp_email : click.toAssignEMAIL.email,\n            copyresp_completed : click.completed\n        })\n    }\n\n    showall = () => this.state.resp.map((val, index) =>\n\n        <TableUserAdmin\n            sno={index + 1}\n            taskname={val.taskname}\n            fromTask={val.fromTask}\n            toTask={val.toTask}\n            completed={val.completed}\n            assignedTo={val.toAssignEMAIL.username ? val.toAssignEMAIL.username : null}\n            yes={() => { this.sendUpdateyes(index) }}\n            assignedBy={val.fromAssign.username}\n        />\n    )\n\n    Slidebar = () => {\n        this.setState({ toggleslide: !this.state.toggleslide })\n    }\n\n    SendUpdate = ()=>\n    {\n        this.setState({ toggle: false })\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.post(`${this.props.ip}/admin/edit`, (\n            {\n                \"id\" : this.state.copyresp_ID,\n                \"taskname\" : this.state.copyresp_taskName,\n                \"fromTask\" : this.state.copyresp_fromdate, \n                \"toTask\": this.state.copyresp_todate, \n                \"email\": this.state.copyresp_email, \n                \"completed\": this.state.copyresp_completed, \n            }\n        ),config).then((res) => {\n            this.GetAlldata()\n            console.log(res.data)\n            if (res.data.error) {\n                ToastsStore.error(res.data.error)\n            }\n            else{\n                \n                ToastsStore.success(res.data.success)\n\n            }\n        })\n        \n    }\n\n    Senddel = ()=>\n    {\n        this.setState({ toggle: false })\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.post(`${this.props.ip}/admin/delete`, (\n            {\n                \"id\" : this.state.copyresp_ID,\n            }\n        ),config).then((res) => {\n\n            this.GetAlldata()\n            if (res.data.error) {\n                ToastsStore.error(res.data.error)\n            }\n            else{\n                \n                ToastsStore.success(res.data.success)\n            }\n        })\n    }\n    render() {\n        return (\n            <div >\n                <ToastsContainer store={ToastsStore} />\n\n                {this.state.toggle ?\n\n\n                    <Modal\n                        backdrop=\"static\"\n                        aria-labelledby=\"contained-modal-title-vcenter\"\n                        centered\n                        show={this.state.toggle}>\n                        <Modal.Header className=\"header_\">\n                            <Modal.Title style={{ textAlign: \"center\", fontWeight: \"800\" }}>Edit</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <p>Task Name : </p>\n                            <input type=\"text\" className=\"form-control\" value={this.state.copyresp_taskName} \n                            onChange={(event)=>{this.setState({copyresp_taskName : event.target.value})}} placeholder=\"Task Name\"></input><br></br>\n                            \n                            \n                            <p>From Date: </p>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"From Date\"\n                             value={this.state.copyresp_fromdate} \n                             onChange={(event)=>{this.setState({copyresp_fromdate : event.target.value})}}\n                            ></input><br></br>\n\n                            <p>End Date : </p>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"To Date\"\n                            value={this.state.copyresp_todate} \n                            onChange={(event)=>{this.setState({copyresp_todate : event.target.value})}}\n                            ></input><br></br>\n\n\n                            <p>Email </p>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Email\"\n                            value={this.state.copyresp_email} \n                            onChange={(event)=>{this.setState({copyresp_email : event.target.value})}}\n                            ></input><br></br>\n\n\n                            <p>Completed : </p>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"completed ?\"\n                            value={this.state.copyresp_completed} \n                            onChange={(event)=>{this.setState({copyresp_completed : event.target.value})}}\n                            ></input><br></br>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <input type=\"button\" className=\"btn btn-success\" onClick={this.SendUpdate} value=\"Update\" />\n                            <input type=\"button\" className=\"btn btn-warning\"  onClick={this.Senddel} value=\"Delete\" />\n\n                            <input type=\"button\" className=\"btn btn-danger\" onClick={() => { this.setState({ toggle: false }) }} value=\"Close\" />\n                        </Modal.Footer>\n                    </Modal> : null}\n\n                <div>\n                    <input className=\"btn btn-primary slidebutt\" type=\"button\" onClick={this.Slidebar} value=\"slidebar\"></input>\n                </div>\n                <div className=\"row\">\n\n                {this.state.toggleslide ? <SlideBar color1=\"#FF9900\"  /> : <SlideBarsmall color1=\"#FF9900\" />}\n\n\n                    <div className=\"col-sm \">\n                        <div style={{ margin: \"5% 8%\", }}>\n                            <div className=\"table bg-white table-responsive\" style={{ borderRadius: \"10px\" }}>\n                                <table className=\"table table-hover\">\n                                    <thead className=\"thead-light text-center\">\n                                        <tr>\n                                            <th className=\"ss\">S.NO</th>\n                                            <th>Taskname</th>\n                                            <th>Start Date</th>\n                                            <th>End Date</th>\n                                            <th>Completed</th>\n                                            <th>Assigned By</th>\n                                            <th>Assigned To</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {this.showall()}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Alltask","/home/baby/Desktop/project/movies/frontend/src/components/slidebar.js",["78","79"],"\nimport { Component } from \"react\";\nimport Cookies from 'universal-cookie';\nimport { Link } from \"react-router-dom\";\nimport { ToastsContainer, ToastsStore } from 'react-toasts';\n\nimport \"./slidestyle.css\"\nclass SlideBar extends Component {\n\n    Logout = () => {\n        localStorage.clear()\n        const cookies = new Cookies();\n        cookies.remove('id',  { path: '/' });\n        cookies.remove('role', { path: '/' });\n        cookies.remove('email', { path: '/' });\n        cookies.remove('name', { path: '/' });\n        cookies.remove('isadmin', { path: '/' });\n    }\n\n    render() {\n        const cookie = new Cookies()\n        return (\n            <div className=\"col-sm-3 text-center p-3 bg-white\" style={{ minHeight: \"700px\", borderRight: \"2px solid #333E47\" }}>\n                <h3 style={{ backgroundColor: \"#FF9900\", padding: \"20px\", fontSize: \"20px\", fontFamily: \"monospace\" }}>KavinGroups</h3>\n\n                <h6 className=\"pt-5\"> Hi, Welcome back !</h6>\n\n                <h4>\n                    {cookie.get(\"name\")}\n                </h4>\n\n                <div className=\"pt-5\">\n                    <Link to=\"/admin/alltask\" style={{backgroundColor:this.props.color1}} className=\"btn text-dark s1 text-primary form-control\">All Tasks</Link><br></br>\n                    <Link to=\"/admin/create\" style={{backgroundColor:this.props.color2}} className=\"btn text-dark s1 text-primary form-control\">Create Tasks</Link><br></br>\n                    <Link to=\"/login\" className=\"btn text-dark s1 text-primary form-control\"\n                    onClick={this.Logout}\n                    >Logout</Link><br></br>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SlideBar","/home/baby/Desktop/project/movies/frontend/src/routes/usertask.js",["80"],"import { Component } from \"react\";\nimport axios from \"axios\"\nimport TableUser from \"../components/tableuser\";\nimport Cookies from 'universal-cookie';\nimport { Link } from \"react-router-dom\";\nimport { ToastsContainer, ToastsStore } from 'react-toasts';\nimport Unauth from \"./unauth\";\nimport jwt_decode from \"jwt-decode\";\n\n\nclass UserTask extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            resp: [],\n            errormsg: \"\"\n        }\n    }\n\n    Logout = () => {\n        localStorage.clear()\n        const cookies = new Cookies();\n        cookies.remove('id',  { path: '/' });\n        cookies.remove('role', { path: '/' });\n        cookies.remove('email', { path: '/' });\n        cookies.remove('name', { path: '/' });\n        cookies.remove('isadmin', { path: '/' });\n    }\n\n    GetAlldata = () => {\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.get(`${this.props.ip}/user`, config).then((res) => {\n            this.setState({ resp: res.data })\n\n            if (res.data.error) {\n                this.setState({\n                    errormsg: res.data.error,\n                })\n            }\n        })\n    }\n\n    userCheck = () => {\n        let token = localStorage.getItem(\"token\")\n        if (token == null) {\n            window.location = \"/login\"\n\n        }\n        else {\n            let dec = jwt_decode(token)\n\n            if (dec.role === \"b7c8ff00ca7181a4d7ab986510bcc9db\") {\n                ToastsStore.success(\"Loggedin !!\")\n            }\n            else {\n                ToastsStore.error(\"unauthorized access !!\")\n                window.location = \"/login\"\n                \n            }\n\n        }\n    }\n\n    componentDidMount() {\n\n        this.GetAlldata()\n        this.userCheck()\n    }\n\n    sendUpdateyes = (index) => {\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.post(`${this.props.ip}/user`, ({\n            id: this.state.resp[index]._id,\n            completed: \"yes\"\n        }), config).then((res) => {\n            if (res.data.error) {\n                ToastsStore.error(res.data.error)\n            }\n            else {\n                ToastsStore.success(res.data.success)\n                this.GetAlldata()\n            }\n\n        })\n    }\n\n    sendUpdateno = (index) => {\n        let config = {\n            headers: {\n                tokenkey: localStorage.getItem(\"token\")\n            }\n        }\n        axios.post(`${this.props.ip}/user`, ({\n            id: this.state.resp[index]._id,\n            completed: \"no\"\n        }), config).then((res) => {\n            if (res.data.error) {\n                ToastsStore.error(res.data.error)\n            }\n            else {\n                ToastsStore.success(res.data.success)\n                this.GetAlldata()\n            }\n\n        })\n    }\n\n    showall = () => this.state.resp.map((val, index) =>\n\n        <TableUser\n            sno={index + 1}\n            taskname={val.taskname}\n            fromTask={val.fromTask}\n            toTask={val.toTask}\n            completed={val.completed}\n            yes={() => { this.sendUpdateyes(index) }}\n            no={() => { this.sendUpdateno(index) }}\n            assignedBy={val.fromAssign.username}\n        />\n    )\n\n\n    render() {\n        const cookies = new Cookies();\n\n        return (\n\n            <div className=\"container\">\n                \n\n                <ToastsContainer store={ToastsStore} />\n\n                <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: '10px' }} className=\"bg-dark container-fluid\">\n                    <h1 className=\"text-white\">Hii {cookies.get('name')}</h1>\n                    <Link to=\"/login\" className=\"btn\" onClick={this.Logout} style={{ backgroundColor: \"#FF9900\" }}>Logout</Link>\n                </div>\n\n                <div style={{ margin: \"5% 8%\", }}>\n                    <div className=\"table bg-white table-responsive-md\" style={{ borderRadius: \"10px\" }}>\n                        <table className=\"table table-hover\">\n                            <thead className=\"thead-light text-center\">\n                                <th>S.NO</th>\n                                <th>Taskname</th>\n                                <th>Start Date</th>\n                                <th>End Date</th>\n                                <th>Completed</th>\n                                <th>Assigned By</th>\n                                <th>Submit</th>\n                            </thead>\n\n                            <tbody>\n                                {this.showall()}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UserTask","/home/baby/Desktop/project/movies/frontend/src/components/tableuser.js",["81"],"import { Component } from \"react\";\n\nclass TableUser extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (<tr style={{ fontSize: \"14px\",textAlign:\"center\" }}>\n            <td>\n                {this.props.sno ? this.props.sno : null}\n            </td>\n            <td>\n                {this.props.taskname ? this.props.taskname : null}\n\n            </td>\n            <td>\n                {this.props.fromTask ? this.props.fromTask : null}\n\n            </td>\n            <td>\n                {this.props.toTask ? this.props.toTask : null}\n\n            </td>\n            <td>\n                {this.props.completed ? this.props.completed : null}\n\n            </td>\n            <td>\n                {this.props.assignedBy ? this.props.assignedBy : null}\n\n            </td>\n            <td>\n                <input className=\"btn\" onClick={this.props.yes} style={{ backgroundColor: \"#FF9900\", marginRight: \"5px\" }} type=\"button\" value=\"yes\"></input>\n                <input className=\"btn bg-dark text-white\" onClick={this.props.no} type=\"button\" value=\"no\"></input>\n\n            </td>\n        </tr>)\n    }\n}\n\nexport default TableUser","/home/baby/Desktop/project/movies/frontend/src/routes/unauth.js",[],"/home/baby/Desktop/project/movies/frontend/src/components/tableuseradmin.js",["82"],"import { Component } from \"react\";\n\nclass TableUserAdmin extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (<tr style={{ fontSize: \"14px\",textAlign:\"center\" }}>\n            <td>\n                {this.props.sno ? this.props.sno : null}\n            </td>\n            <td>\n                {this.props.taskname ? this.props.taskname : null}\n\n            </td>\n            <td>\n                {this.props.fromTask ? this.props.fromTask : null}\n\n            </td>\n            <td>\n                {this.props.toTask ? this.props.toTask : null}\n\n            </td>\n            <td>\n                {this.props.completed ? this.props.completed : null}\n\n            </td>\n            \n            <td>\n                {this.props.assignedBy ? this.props.assignedBy : null}\n\n            </td>\n            <td>\n                {this.props.assignedTo ? this.props.assignedTo : null}\n\n            </td>\n            <td>\n                <input className=\"btn\" onClick={this.props.yes} style={{ backgroundColor: \"#FF9900\", marginRight: \"5px\" }} type=\"button\" value=\"Edit\"></input>\n\n            </td>\n        </tr>)\n    }\n}\n\nexport default TableUserAdmin","/home/baby/Desktop/project/movies/frontend/src/components/slidebarsmall.js",["83","84","85"],"/home/baby/Desktop/project/movies/frontend/src/adminroutes/createtask.js",[],"/home/baby/Desktop/project/movies/frontend/src/routes/404.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":12},{"ruleId":"90","severity":1,"message":"94","line":5,"column":43,"nodeType":"92","messageId":"93","endLine":5,"endColumn":47},{"ruleId":"95","severity":1,"message":"96","line":61,"column":36,"nodeType":"97","messageId":"98","endLine":61,"endColumn":38},{"ruleId":"90","severity":1,"message":"99","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":17},{"ruleId":"90","severity":1,"message":"94","line":7,"column":10,"nodeType":"92","messageId":"93","endLine":7,"endColumn":14},{"ruleId":"90","severity":1,"message":"100","line":11,"column":10,"nodeType":"92","messageId":"93","endLine":11,"endColumn":16},{"ruleId":"90","severity":1,"message":"101","line":81,"column":13,"nodeType":"92","messageId":"93","endLine":81,"endColumn":19},{"ruleId":"90","severity":1,"message":"102","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":25},{"ruleId":"90","severity":1,"message":"103","line":5,"column":27,"nodeType":"92","messageId":"93","endLine":5,"endColumn":38},{"ruleId":"90","severity":1,"message":"104","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":4,"column":5,"nodeType":"107","messageId":"108","endLine":6,"endColumn":6},{"ruleId":"105","severity":1,"message":"106","line":4,"column":5,"nodeType":"107","messageId":"108","endLine":6,"endColumn":6},{"ruleId":"90","severity":1,"message":"102","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":25},{"ruleId":"90","severity":1,"message":"103","line":5,"column":27,"nodeType":"92","messageId":"93","endLine":5,"endColumn":38},{"ruleId":"90","severity":1,"message":"109","line":19,"column":15,"nodeType":"92","messageId":"93","endLine":19,"endColumn":21},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TableUser' is defined but never used.","'Button' is defined but never used.","'config' is assigned a value but never used.","'ToastsContainer' is defined but never used.","'ToastsStore' is defined but never used.","'Unauth' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'cookie' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]